###NUMBER1
#Create a function named double_index that has two parameters named lst and index.
#The function should double the value of the element at index of lst and return the new list with the doubled value.If index is not a valid index, the function should return the original list###

def double_index(lst,index):
  if index< len(lst):
    lst[index]=lst[index]*2
    return lst
  else:
    return lst
 
#Uncomment the line below when your function is done
print(double_index([3, 8, -10, 12], 2))

###NUMBER2
#create a function named remove_middle which has three parameters named lst, start, and end.
#The function should return a sub-list of lst with all elements with index between start and end removed (inclusive).

def remove_middle(lst,start,end):
  new_lst1=lst[:start]
  new_lst2=lst[end+1:]
  return new_lst1+new_lst2

#Uncomment the line below when your function is done to test
print(remove_middle([4, 8, 15, 16, 23, 42], 1, 3))

#cleaner coode
def remove_middle(lst,start,end):
  return lst[:start]+lst[end+1:]
  
###NUMBER 3
def more_than_n(lst,item,n):
  if lst.count(item)>n:
    return True
  else:
    return False

#Uncomment the line below when your function is done
print(more_than_n([2, 4, 6, 2, 3, 2, 1, 2], 2, 3))

###NUMBER4
#Create a function named more_frequent_item that has three parameters named lst, item1, and item2.
#Return either item1 or item2 depending on which item appears more often in lst.
#If the two items appear the same number of times, return item1.

def more_frequent_item(lst,item1,item2):
  if lst.count(item1)>=lst.count(item2):
    return item1
  else:
    return item2

#Uncomment the line below when your function is done
print(more_frequent_item([2, 3, 3, 2, 3, 2, 3, 2, 3], 2, 3))
